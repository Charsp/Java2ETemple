<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop.xsd  
        http://www.springframework.org/schema/lang
        http://www.springframework.org/schema/lang/spring-lang.xsd 
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/util
     	http://www.springframework.org/schema/util/spring-util.xsd 
        http://mybatis.org/schema/mybatis-spring 
        http://mybatis.org/schema/mybatis-spring.xsd
         ">
	<!-- 直接配置属性文件 -->
	<!-- <bean -->
	<!-- class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
	<!-- <property name="locations"> -->
	<!-- <list> -->
	<!-- <value>classpath:jdbc.properties</value> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- </bean> -->
	<context:component-scan base-package="com.swz.wechat">
		<!-- 不扫描 @controller -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 数据库配置文件位置 -->
	<context:property-placeholder
		properties-ref="app" />
	<util:properties id="app" ignore-resource-not-found="true"
		location="classpath:jdbc.properties">
		<!-- 生产环境 -->
		<prop key="dataSource.url">jdbc:mysql://localhost:3306/admin_user</prop>
		<prop key="dataSource.username">dev</prop>
		<prop key="dataSource.password">pass</prop>

		<prop key="hibernate.hbm2ddl.auto">validate</prop>
		<prop key="hibernate.show_sql">false</prop>

		<prop key="cas.service">somedomain:8444/user</prop>
		<prop key="cas.server">somedomain:8444/cas</prop>
		<prop key="cas.key">CAS_KEY_ADMIN.USER</prop>
	</util:properties>

	<!-- 多种数据库类型可使用databaseIdProvider定义 -->
	<bean id="dataSource" class="org.charsboll.datasource.multi.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="gpsDataSource" key="gpsDataSource"></entry>
				<entry value-ref="wechatDataSource" key="wechatDataSource"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="wechatDataSource">
		</property>
	</bean>

	<!-- dbcp数据库配置 -->
	<bean id="gpsDataSource" destroy-method="close"
		class="org.apache.commons.dbcp2.BasicDataSource">
		<!-- 驱动类型 -->
		<property name="driverClassName" value="${jdbc.gps.driverClassName}" />
		<!-- 基础配置 -->
		<property name="url" value="${jdbc.gps.url}" />
		<property name="username" value="${jdbc.gps.username}" />
		<property name="password" value="${jdbc.gps.password}" />
		<!-- 高级配置 -->
		<property name="minIdle" value="${jdbc.gps.minIdle}" />
		<property name="maxIdle" value="${jdbc.gps.maxIdle}" />
		<!-- DBCP:maxWait DBCP2:maxWaitMillis -->
		<!-- <property name="maxWait" value="${jdbc.wechat.maxWait}" /> -->
		<property name="maxWaitMillis" value="${jdbc.gps.maxWaitMillis}" />
		<!-- DBCP:maxActive DBCP2:maxTotal -->
		<!-- <property name="maxActive" value="${jdbc.wechat.maxActive}" /> -->
		<property name="maxTotal" value="${jdbc.gps.maxTotal}" />
		<property name="initialSize" value="${jdbc.gps.initialSize}" />
	</bean>

	<bean id="wechatDataSource" destroy-method="close"
	class="org.apache.commons.dbcp2.BasicDataSource">
		<!-- 驱动类型 -->
		<property name="driverClassName" value="${jdbc.wechat.driverClassName}" />
		<!-- 基础配置 -->
		<property name="url" value="${jdbc.wechat.url}" />
		<property name="username" value="${jdbc.wechat.username}" />
		<property name="password" value="${jdbc.wechat.password}" />
		<!-- 高级配置 -->
		<property name="minIdle" value="${jdbc.wechat.minIdle}" />
		<property name="maxIdle" value="${jdbc.wechat.maxIdle}" />
		<!-- DBCP:maxWait DBCP2:maxWaitMillis -->
		<!-- <property name="maxWait" value="${jdbc.wechat.maxWait}" /> -->
		<property name="maxWaitMillis" value="${jdbc.wechat.maxWaitMillis}" />
		<!-- DBCP:maxActive DBCP2:maxTotal -->
		<!-- <property name="maxActive" value="${jdbc.wechat.maxActive}" /> -->
		<property name="maxTotal" value="${jdbc.wechat.maxTotal}" />
		<property name="initialSize" value="${jdbc.wechat.initialSize}" />
	</bean>
	<!-- 使用annotation注解方式配置事务 <tx:annotation-driven transaction-manager="transactionManager" 
		/> -->

	<!-- 事务处理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- AOP配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="query*" read-only="true" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置AOP切面 -->
	<aop:config>
		<!-- 服务层切面 -->
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.swz.wechat..service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

	<!-- mybatis配置 -->
	<!-- 该包下的类支持注解，表示会被当作{@code mybatis mapper}处理 配置了之后表示可以自动引入mapper类 -->
<!-- 	<mybatis:scan base-package="com.swz.wechat.idao" /> -->
	<!-- 1. Mybatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:config/mysql/mybatis-config.xml"></property>
		<!-- <property name="mapperLocations" value="classpath:mysql/dao/**/*Dao.xml"></property> -->
	</bean>
	<!-- 2. Mybatis的SQLSession模板 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 调出一个Mybatis文件 -->

	<!-- Redis 配置信息 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
		p:pool-config-ref="poolConfig" />

	<bean id="jedis.shardInfo" class="redis.clients.jedis.JedisShardInfo"
		p:password="${redis.pass}">
		<constructor-arg index="0" value="${redis.host}" />
		<constructor-arg index="1" value="${redis.port}" />
	</bean>
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg index="0" ref="poolConfig" />
		<constructor-arg index="1">
			<list>
				<ref bean="jedis.shardInfo" />
			</list>
		</constructor-arg>
	</bean>
	<!-- key解码必须使用字符串类型 -->
	<bean id="keySerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
	<!-- 值解码使用默认就好 -->
	<!-- <bean id="valueSerializer"></bean> -->
	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer" ref="keySerializer"></property>
	</bean>
	<!-- 测试一个AOP方法 -->
	<!-- 一个基于WebSocket的客服系统 -->
	<!-- JMX 的管理系统（JVM的内存监控系统） -->
	<!-- RMI 远程服务系统 -->
	<!-- OXM Javabean对象映射 -->
	<!-- JUnit联合测试 Spring-Test -->
</beans>